//Right rotate
//T.C-O(n)+O(k) S.C-O(n)
void rotate(vector<int>& nums, int k) {
     list<int>l;
        int n=nums.size();
        for(int i=0;i<n;i++)
            l.push_back(nums[i]);
        for(int i=0;i<k;i++)
        {
            int last=l.back();
            l.pop_back();
            l.push_front(last);
        }
      for(int i=0;i<n;i++)
      {
          nums[i]=l.front();
          l.pop_front();
      }
    }
//T.C-O( n)+O(n-k)+O(k),S.C-O(1)
 void rotate(vector<int>& nums, int k) {
        int n=nums.size();
       k=k%n;
        // divide the array in two parts 0 to (length-k-1) AND length-k to length
		// Eg. 1 2 3 4 5 6 7 if k=3 ans should be 5 6 7 1 2 3 4
        reverse(nums.begin(), nums.end()-k);// reverse the first half  4 3 2 1 , full array now- 4 3 2 1 5 6 7
        reverse(nums.end()-k,nums.end()); // reverse the second half 7 6 5  , full array now-  4 3 2 1 7 6 5
        reverse(nums.begin(), nums.end()); // reverse the whole array , full array now- 5 6 7 1 2 3 4
    }
